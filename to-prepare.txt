#I know:
* String manipulation 
* Array manipulation
* SinglyLinkedList: insertNode, removeNode, findNode, reverseLinkedList, detectCycle
* Min-Heap: findKthLargest
* Backtracking pattern: N-Queu, SudokuSolver, getPossiblePermutation in an array
* Tree Traversal: Post-order, Pre-order, In-order
* How to Rotate an Array 
* Two Pointer Pattern 
* Searching algorithms: Linear search, Binary Search, DFSTraversal, BFSTraversal
* Sorting algorithms: 
    BubbleSort, BucketSort, InsertionSort, MergeSort, QuickSort, SelectionSort, TreeSort
* Implement Satck using array
* Implement Queue using array
* Graph: Check if graph is complete graph, Check if graph is bi-part
* Dynamic Programming
* Union-Find
* Slow-fast pointer pattern or fast-slow pattern (Floyd’s Tortoise and Hare algorithm): 
    LinkedList: hasCycle, findStartOfCycle, findMiddleNode, 
    List: PalindromeCheckList
*62. Unique Paths


------------------------------------
#Java Questions: 
1- Explain Java memory model:

2- Explain garbage collection: 

3- Difference between HashMap and ConcurrentHashMap: 

4- Why is String immutable in Java: 

5- Spring boot latest version is : 3.4.5 / April 2025

6- Java Latest Version: Java 24

7- Singleton Pattern:

8- Factory Pattern: 

9- SDLC: 

10- system.arraycopy vs str.substring vs Arrays.copy

11- Junit

12- Mokito

13- Thread Pool: is a group of pre-instantiated threads that are managed and reused to perform tasks.
When a new request comes in, the server borrows a thread from the pool.
When the request finishes, the thread is returned to the pool and reused for future requests.
If all threads are busy, new requests must wait until a thread is available.

14- Spring thread pool: 
In a Spring Boot application (especially in web-based microservices), each HTTP request is handled by a thread. 
But instead of creating a new thread for every request (which is expensive and wasteful), 
Spring uses a thread pool — a set of pre-created, reusable threads.







-------------------------------------------
#System Design Questions:

1- Design a URL shortener:

2- How would you design a rate limiter: 

3- Design a Cache System: 

4- Design Notification System





-------------------------------------------
#Behavioral Googleyness Questions:

1- Tell me about a time you solved a difficult bug:

2- How do you handle disagreement in a team?
I try to understand all perspectives and propose small experiments or prototypes to validate ideas objectively. 

3- Why Google: 
I admire Google’s scale and engineering culture. 
I’m excited about the opportunity to solve real-world problems with clean, scalable code alongside world-class engineers.




